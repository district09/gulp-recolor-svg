// Generated by CoffeeScript 1.10.0
(function() {
  var Color, cheerio, css,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cheerio = require("cheerio");

  Color = require("color");

  css = require("css");

  module.exports = function(stringData, matchers, destColors) {
    var $, getNewColor, handleStyleSheet, i, len, propertiesToReplace, propertyToReplace;
    $ = cheerio.load(stringData, {
      xmlMode: true
    });
    propertiesToReplace = ["fill", "stroke"];
    getNewColor = function(stringColorValue) {
      var color, i, index, len, matcher, outputColor;
      if (stringColorValue !== "none") {
        color = Color(stringColorValue);
        outputColor = stringColorValue;
        for (index = i = 0, len = matchers.length; i < len; index = ++i) {
          matcher = matchers[index];
          if (matcher(color)) {
            outputColor = destColors[index].hexString();
          }
        }
        return outputColor;
      }
    };
    handleStyleSheet = function(element) {
      var data, declaration, i, j, len, len1, ref, ref1, ref2, rule;
      stringData = element.text();
      data = css.parse(stringData, {});
      ref = data.stylesheet.rules;
      for (i = 0, len = ref.length; i < len; i++) {
        rule = ref[i];
        ref1 = rule.declarations;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          declaration = ref1[j];
          if (ref2 = declaration.property, indexOf.call(propertiesToReplace, ref2) >= 0) {
            declaration.value = getNewColor(declaration.value);
          }
        }
      }
      return element.text(css.stringify(data, {}));
    };
    $("style").each(function(index, element) {
      return handleStyleSheet($(element));
    });
    for (i = 0, len = propertiesToReplace.length; i < len; i++) {
      propertyToReplace = propertiesToReplace[i];
      $("[" + propertyToReplace + "]").each(function(index, _element) {
        var element;
        element = $(_element);
        return element.attr(propertyToReplace, getNewColor(element.attr(propertyToReplace)));
      });
    }
    return $.xml();
  };

}).call(this);
